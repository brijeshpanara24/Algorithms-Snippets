<snippet>
	<content><![CDATA[

//---------------------------------------------------------------------------//

//returns (x^(y))
ll pow(ll x, ll y)
{
    ll ans = 1;  
    while (y > 0)
    {
        if(y & 1)
        ans = (ans*x);
        y = y>>1;
        x = (x*x);  
    }
    return ans;
}

//returns (x^(y))%p
ll modpow(ll x, ll y, ll p)
{
    ll ans = 1;  
    x = x % p;  
    while (y > 0)
    {
        if(y & 1)
        ans = (ans*x) % p;
        y = y>>1;
        x = (x*x) % p;  
    }
    return ans;
}

//store gcd of a,b in ggg
//store solution of a*xxx + b*yyy = ggg in xxx,yyy
//if gcd(a,b)=1 then xxx = a^(-1)(mod b) and yyy = b^(-1)(mod a)
ll xxx,yyy,ggg;
void extendedEuclid(ll a, ll b)
{
    if(b==0)
    {
        ggg = a;xxx = 1;yyy = 0;
    }
    else
    {
        extendedEuclid(b,a%b);
        ll temp = xxx;
        xxx = yyy;
        yyy = temp-(a/b)*yyy;
    }
}

// return modulo inverse of a wrt modulo p
// retunt -1 if modulo inverse does not exist
ll modinverse(ll a, ll p)
{
    extendedEuclid(a,p);
    if(ggg==1 && p!=1)
        return (xxx+p)%p;
    else
        return -1;
}

ll add(ll a,ll b,ll m) { return (a+b)%m; }

ll sub(ll a,ll b,ll m) { return (a-b+m)%m; }

ll mult(ll a,ll b,ll m) { return (a*b)%m; }

ll div(ll a,ll b,ll m) { return (a*modinverse(b,m))%m; }

//---------------------------------------------------------------------------//


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>__basics</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
