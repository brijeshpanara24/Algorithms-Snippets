<snippet>
    <content><![CDATA[

//Push-Relabel Algorithm for Flows, Complexity: O(V^2 âˆšE)
//To obtain the actual flow values, look at all edges with capacity > 0
//Zero capacity edges are residual edges

struct edge
{
    ll from, to, cap, flow, index;
    edge(ll from, ll to, ll cap, ll flow, ll index):
    from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct pushRelabel
{
    ll n;
    vector<ll> excess;
    vector<ll> height;
    vector<vector<edge> > adj;
    
    pushRelabel(ll n):
    n(n), adj(n), excess(n), height(n) {}

    void addEdge(ll from, ll to, ll cap)
    {
        adj[from].push_back(edge(from, to, cap, 0, adj[to].size()));
        
        if(from==to)
        adj[from].back().index++;
        
        adj[to].push_back(edge(to, from, 0, 0, adj[from].size()-1));
    }

    void push(edge &e)
    {
        ll amt=(ll)min(excess[e.from], (ll)e.cap - e.flow);
        if(height[e.from]<=height[e.to] || amt==0)
            return;
        e.flow += amt;
        adj[e.to][e.index].flow -= amt;
        excess[e.to] += amt;
        excess[e.from] -= amt;
    }

    void relabel(ll u)
    {
        ll d=2e5;
        for(auto &it:adj[u])
        {
            if(it.cap-it.flow>0)
            d=min(d, height[it.to]);
        }
        if(d<INF)
        height[u]=d+1;
    }

    vector<ll> find_max_height_vertices(ll source, ll dest)
    {
        vector<ll> max_height;
        for(ll i=0;i<n;i++)
        {
            if(i!=source && i!=dest && excess[i]>0)
            {
                if(!max_height.empty() && height[i] > height[max_height[0]])
                    max_height.clear();
                if(max_height.empty() || height[i] == height[max_height[0]])
                    max_height.push_back(i);
            }
        }
        return max_height;
    }

    ll max_flow(ll source, ll dest)
    {
        excess.assign(n, 0);
        height.assign(n, 0);
        height[source]=n;
        excess[source]=INF;
        for(auto &it:adj[source])
        push(it);

        vector<ll> current;
        while(!(current = find_max_height_vertices(source, dest)).empty())
        {
            for(auto i:current)
            {
                bool pushed=false;
                for(auto &e:adj[i])
                {
                    if(excess[i]==0)
                        break;
                    if(e.cap - e.flow>0 && height[e.from] == height[e.to] + 1)
                    {
                        push(e);
                        pushed=true;
                    }
                }
                if(!pushed)
                {
                    relabel(i);
                    break;
                }
            }
        }

        ll max_flow=0;
        for(auto &e:adj[source])
        max_flow+=e.flow;

        return max_flow;
    }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>__maximumFlow</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>